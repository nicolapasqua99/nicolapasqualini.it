extend type Query {
  """
  ✨ Look up a single `Card` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  card(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Card_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Card_FirstRow
  ): Card @fdc_generated(from: "Card", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `CardPack` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  cardPack(
    """
    The key used to identify the object.
    """
    key: CardPack_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: CardPack_FirstRow
  ): CardPack @fdc_generated(from: "CardPack", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Offer` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  offer(
    """
    The key used to identify the object.
    """
    key: Offer_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Offer_FirstRow
  ): Offer @fdc_generated(from: "Offer", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Pack` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  pack(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Pack_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Pack_FirstRow
  ): Pack @fdc_generated(from: "Pack", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Rarity` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  rarity(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Rarity_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Rarity_FirstRow
  ): Rarity @fdc_generated(from: "Rarity", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `RelatedCard` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  relatedCard(
    """
    The key used to identify the object.
    """
    key: RelatedCard_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: RelatedCard_FirstRow
  ): RelatedCard @fdc_generated(from: "RelatedCard", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Request` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  request(
    """
    The key used to identify the object.
    """
    key: Request_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Request_FirstRow
  ): Request @fdc_generated(from: "Request", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Set` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  set(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Set_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Set_FirstRow
  ): Set @fdc_generated(from: "Set", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `User` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  user(
    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User @fdc_generated(from: "User", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `UserCard` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  userCard(
    """
    The key used to identify the object.
    """
    key: UserCard_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: UserCard_FirstRow
  ): UserCard @fdc_generated(from: "UserCard", purpose: QUERY_SINGLE)
  """
  ✨ List `Card` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  cards(
    """
    Filter condition to narrow down the query results.
    """
    where: Card_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Card_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Card_Having
  ): [Card!]! @fdc_generated(from: "Card", purpose: QUERY_MULTIPLE)
  """
  ✨ List `CardPack` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  cardPacks(
    """
    Filter condition to narrow down the query results.
    """
    where: CardPack_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [CardPack_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: CardPack_Having
  ): [CardPack!]! @fdc_generated(from: "CardPack", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Offer` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  offers(
    """
    Filter condition to narrow down the query results.
    """
    where: Offer_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Offer_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Offer_Having
  ): [Offer!]! @fdc_generated(from: "Offer", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Pack` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  packs(
    """
    Filter condition to narrow down the query results.
    """
    where: Pack_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Pack_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Pack_Having
  ): [Pack!]! @fdc_generated(from: "Pack", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Rarity` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  rarities(
    """
    Filter condition to narrow down the query results.
    """
    where: Rarity_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Rarity_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Rarity_Having
  ): [Rarity!]! @fdc_generated(from: "Rarity", purpose: QUERY_MULTIPLE)
  """
  ✨ List `RelatedCard` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  relatedCards(
    """
    Filter condition to narrow down the query results.
    """
    where: RelatedCard_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [RelatedCard_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: RelatedCard_Having
  ): [RelatedCard!]! @fdc_generated(from: "RelatedCard", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Request` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  requests(
    """
    Filter condition to narrow down the query results.
    """
    where: Request_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Request_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Request_Having
  ): [Request!]! @fdc_generated(from: "Request", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Set` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  sets(
    """
    Filter condition to narrow down the query results.
    """
    where: Set_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Set_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Set_Having
  ): [Set!]! @fdc_generated(from: "Set", purpose: QUERY_MULTIPLE)
  """
  ✨ List `User` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  users(
    """
    Filter condition to narrow down the query results.
    """
    where: User_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [User_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: User_Having
  ): [User!]! @fdc_generated(from: "User", purpose: QUERY_MULTIPLE)
  """
  ✨ List `UserCard` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  userCards(
    """
    Filter condition to narrow down the query results.
    """
    where: UserCard_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserCard_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: UserCard_Having
  ): [UserCard!]! @fdc_generated(from: "UserCard", purpose: QUERY_MULTIPLE)
}
